using Microsoft.EntityFrameworkCore;
using TourPlanner.RestServer.DAL.Repository.Interfaces;
using TourPlanner.Model;

namespace TourPlanner.RestServer.DAL.Repository;

public class TourLogRepository : ITourLogRepository
{
    private readonly AppDbContext _context;
    
    
    public TourLogRepository(AppDbContext context)
    {
        _context = context;
    }
    
    
    public async Task<TourLog> GetTourLogByIdAsync(int id)
    {
        var log = await _context.TourLogs.FirstOrDefaultAsync(l => l.LogId == id);
        
        if (log == null)
        {
            throw new KeyNotFoundException($"TourLog with ID {id} not found");
        }
        
        return log;
    }

    
    public async Task<TourLog> AddTourLogAsync(int parentTourId, TourLog newLog)
    {
        var tour = await _context.Tours
            .Include(t => t.Logs)
            .FirstOrDefaultAsync(t => t.TourId == parentTourId);
        
        if (tour == null)
        {
            throw new KeyNotFoundException($"Tour with ID {parentTourId} not found");
        }

        newLog.LogId = 0; // Clear any values in this field to ensure the ID will be auto-generated by the database
        
        tour.Logs.Add(newLog);
        await _context.SaveChangesAsync();
        
        return newLog; // The ID field is updated to the new auto-generated value automatically when calling SaveChangesAsync
    }

    
    public async Task<TourLog> UpdateTourLogAsync(TourLog updatedTourLog)
    {
        var log = await _context.TourLogs.FirstOrDefaultAsync(l => l.LogId == updatedTourLog.LogId);
        if (log == null)
        {
            throw new KeyNotFoundException($"TourLog with ID {updatedTourLog.LogId} not found");
        }

        // Update log properties
        log.Comment = updatedTourLog.Comment;
        log.Difficulty = updatedTourLog.Difficulty;
        log.DistanceTraveled = updatedTourLog.DistanceTraveled;
        log.TimeTaken = updatedTourLog.TimeTaken;
        log.Rating = updatedTourLog.Rating;
        log.TimeStamp = updatedTourLog.TimeStamp;

        await _context.SaveChangesAsync();
        
        return log;
    }

    
    public async Task<bool> DeleteTourLogAsync(int id)
    {
        var log = await _context.TourLogs.FirstOrDefaultAsync(l => l.LogId == id);
        
        if (log == null)
        {
            throw new KeyNotFoundException($"TourLog with ID {id} not found");
        }

        _context.TourLogs.Remove(log);
        await _context.SaveChangesAsync();
        
        return true;
    }
}